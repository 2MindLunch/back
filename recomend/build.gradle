plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'java'
}

group = 'com.2sim.sim'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	querydsl.extendsFrom compileClasspath
}

//https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '2.17.0'
		}
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')	//(3) 빌드시 snippets 파일들이 저장될 저장소
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir	//(4) test 실행 시 파일을 (3)에서 설정한 저장소에 출력하도록 설정
}

asciidoctor {	//(5) asccidoctor 설정
	dependsOn test
	inputs.dir snippetsDir
}

asciidoctor.doFirst {	//(6) asciidoctor가 실행될 때 docs 하위 파일 삭제
	delete file('src/main/resources/static/docs')
}


bootJar {
	dependsOn asciidoctor // (3)
	from("${asciidoctor.outputDir}/html5") { // (4)
		into 'static/docs'
	}
	//enabled = false
}

task copyDocument(type: Copy) {		//(8) from의 파일을 into로 복사
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {		//(9) build 시 copyDocument 실행
	dependsOn copyDocument
}

jar {
	enabled = true
}

// querydsl 적용
def generated='src/main/generated'
sourceSets {
	main.java.srcDirs += [ generated ]
}
clean.doLast {
	file(generated).deleteDir()
}

dependencies {
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.6.1'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.6'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.json:json:20160810'
	implementation 'com.google.firebase:firebase-admin:6.8.1'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//restdocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//querydsl
	implementation"com.querydsl:querydsl-core"
	implementation"com.querydsl:querydsl-jpa"
	annotationProcessor"com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor"jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	annotationProcessor"jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileJava {
		options.incremental = false
		options.annotationProcessorPath = configurations.annotationProcessor
		options.setAnnotationProcessorGeneratedSourcesDirectory(file("src/main/generated"))
	}
}
